{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","beerData","_this2","axios","get","then","res","setState","data","SearchBar","Search","columns","map","col","dataField","text","expandRow","renderer","row","react_default","a","createElement","Fragment","Description","Aroma","Taste","Finish","className","react_bootstrap_table2_toolkit_lib_default","keyField","search","props","searchProps","lib_default","assign","baseProps","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAQqBA,cACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,SAAU,IAHAR,mFAOM,IAAAS,EAAAN,KAClBO,IAAMC,IAAI,gDACPC,KAAK,SAACC,GACLJ,EAAKK,SAAS,CAACN,SAAUK,EAAIE,0CAI1B,IACCP,EAAaL,KAAKI,MAAlBC,SACAQ,EAAcC,SAAdD,UAEFE,EAAU,CAAC,OAAQ,UAAW,UAAUC,IAAI,SAAAC,GAAG,MAAK,CAAEC,UAAWD,EAAKE,KAAMF,KAE5EG,EAAY,CAChBC,SAAU,SAAAC,GAAG,OACXC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,iBAAL,KAAmBH,EAAIK,aACvBJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kBAAL,KAAoBH,EAAIM,OACxBL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kBAAL,KAAoBH,EAAIO,OACxBN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,mBAAL,KAAqBH,EAAIQ,WAK/B,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CACES,SAAS,OACTrB,KAAOP,EACPU,QAAUA,EACVmB,QAAM,GAGJ,SAAAC,GAAK,OACHZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAACZ,EAAesB,EAAMC,aACtBb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACY,EAAAb,EAAD1B,OAAAwC,OAAA,GACOH,EAAMI,UADb,CAEEnB,UAAcA,gBAhDCoB,aCIbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.8b0df2d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css';\nimport './App.css';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      beerData: []\n    }\n  }\n\n  componentDidMount() {\n    axios.get('https://beer-necessities.herokuapp.com/beers')\n      .then((res) => {\n        this.setState({beerData: res.data});\n      })\n  }\n\n  render() {\n    const { beerData } = this.state;\n    const { SearchBar } = Search;\n\n    const columns = ['Name', 'Brewery', 'Rating'].map(col => ({ dataField: col, text: col }));\n\n    const expandRow = {\n      renderer: row => (\n        <React.Fragment>\n          <div><b>Look</b>: {row.Description}</div>\n          <div><b>Aroma</b>: {row.Aroma}</div>\n          <div><b>Taste</b>: {row.Taste}</div>\n          <div><b>Finish</b>: {row.Finish}</div>\n        </React.Fragment>\n      )\n    };\n\n    return (\n      <div className=\"App\">\n        <ToolkitProvider\n          keyField=\"Name\"\n          data={ beerData }\n          columns={ columns }\n          search\n        >\n          {\n            props => (\n              <div>\n                <h3>Search for beers below: </h3>\n                <SearchBar { ...props.searchProps } />\n                <hr />\n                <BootstrapTable\n                  { ...props.baseProps }\n                  expandRow = { expandRow }\n                />\n              </div>\n            )\n          }\n        </ToolkitProvider>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}